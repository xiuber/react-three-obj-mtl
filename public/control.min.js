class MeshControl{constructor(t,o){this.camera=t,this.controls=o,this.controlObj=null,this.dt=0,this.control={top:!1,bottom:!1,left:!1,right:!1};var e=new THREE.LineBasicMaterial({color:255}),n=[],r=(new THREE.BufferGeometry).setFromPoints(n);this.line=new THREE.LineSegments(r,e),scene.add(this.line)}addObject(t){this.controlObj=new THREE.Group,this.controlObj.add(t);var o=new THREE.Box3;o.expandByObject(this.controlObj);const e=o.getSize();this.controlObj._size=e,this.controlObj._box=o;const n=this.getAroundVec(this.controlObj.position,this.camera);return this.controlObj._around=n,this.controlObj._history=n.bottom,this.controlObj._len=0,this.controlObj}update(t,o){const e=Object.values(t).filter(t=>t).length;if(0===e)return!1;if(!this.controlObj)return!1;const n=this.controlObj.position,r=new THREE.Vector3;this.controlObj._box.getCenter(r);const i=this.controlObj._history.clone(),s=n.distanceTo(i);let c=n.clone();if(1===e){if(t.top&&(c=n.clone().lerp(i,-1/s),this.controlObj.rotation.y=0),t.bottom){const t=n.clone().lerp(i,1/s+1);c=n.clone().lerp(i,1/s),this.controlObj._history=t.clone(),this.controlObj.rotation.y=THREE.MathUtils.degToRad(180)}if(t.left||t.right){const o=t.left?90:270;c=this.updatePosition(o,n,i),this.controlObj.rotation.y=THREE.MathUtils.degToRad(180-o)}}if(e>1&&(t.top&&t.left||t.top&&t.right||t.bottom&&t.left||t.bottom&&t.right)){const o=this.getRad(t);c=this.updatePosition(o,n,i),this.controlObj.rotation.y=THREE.MathUtils.degToRad(180-o)}this.controlObj.position.copy(c),this.updateCamera(c,this.controls)}getAroundVec(t,o){const e=new THREE.Vector2(t.x,t.z),n=Math.max.apply(null,Object.values(this.controlObj._size));let r=new THREE.Vector3(o.position.x,t.y,o.position.z);const i=r.distanceTo(t),s=t.clone().lerp(r,-n/i);r=t.clone().lerp(s,-1);const c=new THREE.Vector2(s.x,s.z).clone().rotateAround(e,Math.PI/2),l=new THREE.Vector3(c.x,t.y,c.y),h=t.clone().lerp(l,-1);return{top:s,bottom:r,left:h,right:l,length:i}}getRad(t){let o=0;return t.top&&t.left&&(o=135),t.top&&t.right&&(o=225),t.bottom&&t.left&&(o=45),t.bottom&&t.right&&(o=315),o}updatePosition(t,o,e){const n=new THREE.Vector2(o.x,o.z),r=new THREE.Vector2(e.x,e.z),i=r.clone().rotateAround(n,THREE.MathUtils.degToRad(t)),s=new THREE.Vector3(i.x,o.y,i.y),c=o.distanceTo(s),l=o.clone().lerp(s,1/c),h=l.clone().sub(o);return this.controlObj._history.add(h),l}updateCamera(t,o){o.target.copy(t)}}